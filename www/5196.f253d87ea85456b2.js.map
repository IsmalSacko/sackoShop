{"version":3,"file":"5196.f253d87ea85456b2.js","mappings":"+JAGA,MAAMA,EAAcA,CAACC,EAAUC,IACK,OAAzBA,EAAGC,QAAQF,GAKhBG,EAAqBA,CAACC,EAAOC,IACP,iBAAVD,GAAsBA,EAAME,OAAS,EAC7CC,OAAOC,OAAO,CAAE,aAAa,EAAM,CAAC,aAAaJ,MAAU,GAAQC,GAAeA,EAYtFI,EAAeC,IACjB,MAAMC,EAAM,CAAC,EACbC,MAZkBF,SACFG,IAAZH,GACcI,MAAMC,QAAQL,GAAWA,EAAUA,EAAQM,MAAM,MAE1DC,OAAQC,GAAW,MAALA,GACdP,IAAKO,GAAMA,EAAEC,QACbF,OAAQC,GAAY,KAANA,GAEhB,GAIPN,CAAaF,GAASU,QAASF,GAAOP,EAAIO,IAAK,GACxCP,GAELU,EAAS,uBACTC,EAAO,eAAAC,KAAAC,KAAG,UAAOC,EAAKC,EAAIC,EAAWC,GACvC,GAAW,MAAPH,GAA0B,MAAXA,EAAI,KAAeJ,EAAOQ,KAAKJ,GAAM,CACpD,MAAMK,EAASC,SAASC,cAAc,cACtC,GAAIF,EACA,OACIJ,GAAGO,iBAEAH,EAAOI,KAAKT,EAAKE,EAAWC,EAE3C,CACA,OAAO,CACX,GAAC,gBAXYO,EAAAC,EAAAC,EAAAC,GAAA,OAAAf,EAAAgB,MAAAC,KAAAC,UAAA,2HCnBb,MAKMC,EAAmB,UAAnBA,EAAsB,MACxBC,YAAYC,IACRC,OAAiBL,KAAMI,GACvBJ,KAAKM,yBAA2B,KAC5B,MAAQC,cAAeP,KAClBO,IAGLA,EAAWC,KAA2B,SAApBD,EAAWC,KAAkB,WAAa,SAEhER,KAAKpC,WAAQS,EACb2B,KAAKS,cAAWpC,EAChB2B,KAAKU,cAAWrC,EAChB2B,KAAKQ,KAAO,UAChB,CAMAG,aAAaC,GACQ,SAAbA,GAAoC,aAAbA,IACvBC,OAAgB,+FAA+FD,wBAAgCZ,KAAKvC,GAG5J,CACAqD,oBACI,MAAQrD,MAAOuC,KACTO,EAAcP,KAAKO,WAAa9C,EAAGC,QAAQ,aAC5C6C,EAWLP,KAAKQ,KAAOD,EAAWC,MAVnBK,OAAgB,oHAAqHpD,EAW7I,CACAsD,uBACIf,KAAKO,WAAa,IACtB,CACAS,SACI,IAAIC,EAAIC,EACR,MAAQtD,QAAO4C,QAASR,KAClBmB,KAAOC,KAAWpB,MAClBqB,EAA4C,QAAxBJ,EAAKjB,KAAKS,gBAA6B,IAAPQ,EAAgBA,EAAKK,IACzEC,EAA4C,QAAxBL,EAAKlB,KAAKU,gBAA6B,IAAPQ,EAAgBA,EAAKM,IACzEC,EAA6B,SAATjB,EAC1B,SAAQkB,KAAEC,IAAM,CAAEC,IAAK,2CAA4CC,SAAOlE,KAAmBC,EAAO,CAC5FkE,CAACX,IAAO,MACT,EAAGO,KAAE,aAAc,CAAEE,IAAK,2CAA4CT,KAAMA,EAAMvD,MAAOA,EAAOmE,KAAM,QAASC,MAAO,QAAS,eAAgBP,EAAoB,OAAS,QAAS,aAAc,gBAAiBQ,KAAM,SAAUzB,KAAM,SAAU0B,cAAgBhD,IAMnQA,EAAGO,gBAAe,EACnB0C,QAASnC,KAAKM,2BAAyB,EAAGoB,KAAE,WAAY,CAAEE,IAAK,2CAA4CQ,KAAM,YAAa,cAAe,OAAQC,KAAMZ,EAAoBF,EAAmBF,KAC7M,CACA,MAAI5D,GAAO,SAAO6E,KAAWtC,KAAO,CACpC,mBAAWuC,GAAa,MAAO,CAC3B/B,KAAQ,CAAC,gBACV,GAEPN,SAAoBsC,MAAQ,CACxBC,IA3E8B,GA4E9BC,GAzE6B,IAG3BxC,CAAmB","names":["hostContext","selector","el","closest","createColorClasses","color","cssClassMap","length","Object","assign","getClassMap","classes","map","getClassList","undefined","Array","isArray","split","filter","c","trim","forEach","SCHEME","openURL","_ref","_asyncToGenerator","url","ev","direction","animation","test","router","document","querySelector","preventDefault","push","_x","_x2","_x3","_x4","apply","this","arguments","InputPasswordToggle","constructor","hostRef","registerInstance","togglePasswordVisibility","inputElRef","type","showIcon","hideIcon","onTypeChange","newValue","printIonWarning","connectedCallback","disconnectedCallback","render","_a","_b","mode","getIonMode","showPasswordIcon","eye","hidePasswordIcon","eyeOff","isPasswordVisible","h","Host","key","class","g","fill","shape","role","onPointerDown","onClick","slot","icon","getElement","watchers","style","ios","md"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/theme-01f3f29c.js","./node_modules/@ionic/core/dist/esm/ion-input-password-toggle.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nconst hostContext = (selector, el) => {\n    return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color, cssClassMap) => {\n    return typeof color === 'string' && color.length > 0\n        ? Object.assign({ 'ion-color': true, [`ion-color-${color}`]: true }, cssClassMap) : cssClassMap;\n};\nconst getClassList = (classes) => {\n    if (classes !== undefined) {\n        const array = Array.isArray(classes) ? classes : classes.split(' ');\n        return array\n            .filter((c) => c != null)\n            .map((c) => c.trim())\n            .filter((c) => c !== '');\n    }\n    return [];\n};\nconst getClassMap = (classes) => {\n    const map = {};\n    getClassList(classes).forEach((c) => (map[c] = true));\n    return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction, animation) => {\n    if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n        const router = document.querySelector('ion-router');\n        if (router) {\n            if (ev != null) {\n                ev.preventDefault();\n            }\n            return router.push(url, direction, animation);\n        }\n    }\n    return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, h, e as Host, f as getElement } from './index-527b9e34.js';\nimport { p as printIonWarning } from './index-738d7504.js';\nimport { c as createColorClasses } from './theme-01f3f29c.js';\nimport { x as eye, y as eyeOff } from './index-e2cf2ceb.js';\nimport { b as getIonMode } from './ionic-global-ca86cf32.js';\n\nconst iosInputPasswordToggleCss = \"\";\nconst IonInputPasswordToggleIosStyle0 = iosInputPasswordToggleCss;\n\nconst mdInputPasswordToggleCss = \"\";\nconst IonInputPasswordToggleMdStyle0 = mdInputPasswordToggleCss;\n\nconst InputPasswordToggle = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.togglePasswordVisibility = () => {\n            const { inputElRef } = this;\n            if (!inputElRef) {\n                return;\n            }\n            inputElRef.type = inputElRef.type === 'text' ? 'password' : 'text';\n        };\n        this.color = undefined;\n        this.showIcon = undefined;\n        this.hideIcon = undefined;\n        this.type = 'password';\n    }\n    /**\n     * Whenever the input type changes we need to re-run validation to ensure the password\n     * toggle is being used with the correct input type. If the application changes the type\n     * outside of this component we also need to re-render so the correct icon is shown.\n     */\n    onTypeChange(newValue) {\n        if (newValue !== 'text' && newValue !== 'password') {\n            printIonWarning(`ion-input-password-toggle only supports inputs of type \"text\" or \"password\". Input of type \"${newValue}\" is not compatible.`, this.el);\n            return;\n        }\n    }\n    connectedCallback() {\n        const { el } = this;\n        const inputElRef = (this.inputElRef = el.closest('ion-input'));\n        if (!inputElRef) {\n            printIonWarning('No ancestor ion-input found for ion-input-password-toggle. This component must be slotted inside of an ion-input.', el);\n            return;\n        }\n        /**\n         * Important: Set the type in connectedCallback because the default value\n         * of this.type may not always be accurate. Usually inputs have the \"password\" type\n         * but it is possible to have the input to initially have the \"text\" type. In that scenario\n         * the wrong icon will show briefly before switching to the correct icon. Setting the\n         * type here allows us to avoid that flicker.\n         */\n        this.type = inputElRef.type;\n    }\n    disconnectedCallback() {\n        this.inputElRef = null;\n    }\n    render() {\n        var _a, _b;\n        const { color, type } = this;\n        const mode = getIonMode(this);\n        const showPasswordIcon = (_a = this.showIcon) !== null && _a !== void 0 ? _a : eye;\n        const hidePasswordIcon = (_b = this.hideIcon) !== null && _b !== void 0 ? _b : eyeOff;\n        const isPasswordVisible = type === 'text';\n        return (h(Host, { key: 'd9811e25bfeb2aa197352bb9be852e9e420739d5', class: createColorClasses(color, {\n                [mode]: true,\n            }) }, h(\"ion-button\", { key: '1eaea1442b248fb2b8d61538b27274e647a07804', mode: mode, color: color, fill: \"clear\", shape: \"round\", \"aria-checked\": isPasswordVisible ? 'true' : 'false', \"aria-label\": \"show password\", role: \"switch\", type: \"button\", onPointerDown: (ev) => {\n                /**\n                 * This prevents mobile browsers from\n                 * blurring the input when the password toggle\n                 * button is activated.\n                 */\n                ev.preventDefault();\n            }, onClick: this.togglePasswordVisibility }, h(\"ion-icon\", { key: '9c88de8f4631d9bde222ce2edf6950d639e04773', slot: \"icon-only\", \"aria-hidden\": \"true\", icon: isPasswordVisible ? hidePasswordIcon : showPasswordIcon }))));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"type\": [\"onTypeChange\"]\n    }; }\n};\nInputPasswordToggle.style = {\n    ios: IonInputPasswordToggleIosStyle0,\n    md: IonInputPasswordToggleMdStyle0\n};\n\nexport { InputPasswordToggle as ion_input_password_toggle };\n"],"x_google_ignoreList":[0,1]}