{"version":3,"file":"7971.95c501c39c3f49a5.js","mappings":"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","names":["hostContext","selector","el","closest","createColorClasses","color","cssClassMap","length","Object","assign","getClassMap","classes","map","getClassList","undefined","Array","isArray","split","filter","c","trim","forEach","SCHEME","openURL","_ref","_asyncToGenerator","url","ev","direction","animation","test","router","document","querySelector","preventDefault","push","_x","_x2","_x3","_x4","apply","this","arguments","Route","constructor","hostRef","registerInstance","ionRouteDataChanged","createEvent","component","componentProps","beforeLeave","beforeEnter","onUpdate","newValue","emit","onComponentProps","oldValue","keys1","keys","keys2","key","connectedCallback","watchers","RouteRedirect","ionRouteRedirectChanged","from","to","propDidChange","ROUTER_INTENT_NONE","ROUTER_INTENT_FORWARD","generatePath","segments","s","join","parsePath","path","queryString","qsStart","indexOf","substring","writeNavState","root","chain","index","changed","outlet","searchNavNode","Promise","resolve","componentOnReady","route","result","setRouteId","id","params","element","markVisible","e","console","error","readNavState","_ref2","ids","node","getRouteId","_x5","OUTLET_SELECTOR","matches","findRouteRedirect","redirects","find","redirect","matchesRedirect","i","expected","matchesIDs","len","Math","min","score","routeId","routeChain","toLowerCase","routeIdParams","pathWithParams","j","matchesSegments","inputSegments","RouterSegments","allparams","matchesDefault","chainSegments","segment","data","next","slice","mergeParams","a","b","findChainForSegments","chains","match","bestScore","matchedChain","computePriority","level","pow","shift","readProp","prop","hasAttribute","getAttribute","readRedirects","children","tagName","readRoutes","flattenRouterTree","readRouteNodes","nodes","flattenNode","child","Router","ionRouteWillChange","ionRouteDidChange","previousPath","busy","state","lastState","useHash","componentWillLoad","_this","body","window","addEventListener","once","canProceed","runGuards","getSegments","setSegments","writeNavStateRoot","onRoutesChanged","componentDidLoad","debounce","onRedirectChanged","bind","onPopState","_this2","historyDirection","onBackButton","detail","register","processNextHandler","back","canTransition","_this3","_this4","_a","startsWith","currentPath","URL","pathname","search","parsedPath","history","waitPromise","printDebug","_this5","routes","group","r","debug","groupEnd","printRoutes","printRedirects","navChanged","_this6","warn","findChainForIDs","maxMatches","param","chainToSegments","safeWriteNavState","win","replaceState","title","location","href","_this7","redirectFrom","toSegments","_this8","unlock","lock","_this9","p","_this10","fromChain","beforeLeaveHook","canLeave","toChain","beforeEnterHook","_this11","routeEvent","routeChangeEvent","writeSegments","generateUrl","pushState","readSegments","loc","prefix","hash","removePrefix","redirectFromSegments","redirectedFrom","getElement","RouterLink","onClick","routerDirection","routerAnimation","rel","target","render","mode","getIonMode","attrs","h","Host","class","style"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/theme-01f3f29c.js","./node_modules/@ionic/core/dist/esm/ion-route_4.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nconst hostContext = (selector, el) => {\n    return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color, cssClassMap) => {\n    return typeof color === 'string' && color.length > 0\n        ? Object.assign({ 'ion-color': true, [`ion-color-${color}`]: true }, cssClassMap) : cssClassMap;\n};\nconst getClassList = (classes) => {\n    if (classes !== undefined) {\n        const array = Array.isArray(classes) ? classes : classes.split(' ');\n        return array\n            .filter((c) => c != null)\n            .map((c) => c.trim())\n            .filter((c) => c !== '');\n    }\n    return [];\n};\nconst getClassMap = (classes) => {\n    const map = {};\n    getClassList(classes).forEach((c) => (map[c] = true));\n    return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction, animation) => {\n    if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n        const router = document.querySelector('ion-router');\n        if (router) {\n            if (ev != null) {\n                ev.preventDefault();\n            }\n            return router.push(url, direction, animation);\n        }\n    }\n    return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, c as createEvent, f as getElement, h, e as Host } from './index-527b9e34.js';\nimport { c as componentOnReady, p as debounce } from './helpers-78efeec3.js';\nimport { o as openURL, c as createColorClasses } from './theme-01f3f29c.js';\nimport { b as getIonMode } from './ionic-global-ca86cf32.js';\n\nconst Route = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\n        this.url = '';\n        this.component = undefined;\n        this.componentProps = undefined;\n        this.beforeLeave = undefined;\n        this.beforeEnter = undefined;\n    }\n    onUpdate(newValue) {\n        this.ionRouteDataChanged.emit(newValue);\n    }\n    onComponentProps(newValue, oldValue) {\n        if (newValue === oldValue) {\n            return;\n        }\n        const keys1 = newValue ? Object.keys(newValue) : [];\n        const keys2 = oldValue ? Object.keys(oldValue) : [];\n        if (keys1.length !== keys2.length) {\n            this.onUpdate(newValue);\n            return;\n        }\n        for (const key of keys1) {\n            if (newValue[key] !== oldValue[key]) {\n                this.onUpdate(newValue);\n                return;\n            }\n        }\n    }\n    connectedCallback() {\n        this.ionRouteDataChanged.emit();\n    }\n    static get watchers() { return {\n        \"url\": [\"onUpdate\"],\n        \"component\": [\"onUpdate\"],\n        \"componentProps\": [\"onComponentProps\"]\n    }; }\n};\n\nconst RouteRedirect = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\n        this.from = undefined;\n        this.to = undefined;\n    }\n    propDidChange() {\n        this.ionRouteRedirectChanged.emit();\n    }\n    connectedCallback() {\n        this.ionRouteRedirectChanged.emit();\n    }\n    static get watchers() { return {\n        \"from\": [\"propDidChange\"],\n        \"to\": [\"propDidChange\"]\n    }; }\n};\n\nconst ROUTER_INTENT_NONE = 'root';\nconst ROUTER_INTENT_FORWARD = 'forward';\nconst ROUTER_INTENT_BACK = 'back';\n\n/** Join the non empty segments with \"/\". */\nconst generatePath = (segments) => {\n    const path = segments.filter((s) => s.length > 0).join('/');\n    return '/' + path;\n};\nconst generateUrl = (segments, useHash, queryString) => {\n    let url = generatePath(segments);\n    if (useHash) {\n        url = '#' + url;\n    }\n    if (queryString !== undefined) {\n        url += '?' + queryString;\n    }\n    return url;\n};\nconst writeSegments = (history, root, useHash, segments, direction, state, queryString) => {\n    const url = generateUrl([...parsePath(root).segments, ...segments], useHash, queryString);\n    if (direction === ROUTER_INTENT_FORWARD) {\n        history.pushState(state, '', url);\n    }\n    else {\n        history.replaceState(state, '', url);\n    }\n};\n/**\n * Transforms a chain to a list of segments.\n *\n * Notes:\n * - parameter segments of the form :param are replaced with their value,\n * - null is returned when a value is missing for any parameter segment.\n */\nconst chainToSegments = (chain) => {\n    const segments = [];\n    for (const route of chain) {\n        for (const segment of route.segments) {\n            if (segment[0] === ':') {\n                // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n                const param = route.params && route.params[segment.slice(1)];\n                if (!param) {\n                    return null;\n                }\n                segments.push(param);\n            }\n            else if (segment !== '') {\n                segments.push(segment);\n            }\n        }\n    }\n    return segments;\n};\n/**\n * Removes the prefix segments from the path segments.\n *\n * Return:\n * - null when the path segments do not start with the passed prefix,\n * - the path segments after the prefix otherwise.\n */\nconst removePrefix = (prefix, segments) => {\n    if (prefix.length > segments.length) {\n        return null;\n    }\n    if (prefix.length <= 1 && prefix[0] === '') {\n        return segments;\n    }\n    for (let i = 0; i < prefix.length; i++) {\n        if (prefix[i] !== segments[i]) {\n            return null;\n        }\n    }\n    if (segments.length === prefix.length) {\n        return [''];\n    }\n    return segments.slice(prefix.length);\n};\nconst readSegments = (loc, root, useHash) => {\n    const prefix = parsePath(root).segments;\n    const pathname = useHash ? loc.hash.slice(1) : loc.pathname;\n    const segments = parsePath(pathname).segments;\n    return removePrefix(prefix, segments);\n};\n/**\n * Parses the path to:\n * - segments an array of '/' separated parts,\n * - queryString (undefined when no query string).\n */\nconst parsePath = (path) => {\n    let segments = [''];\n    let queryString;\n    if (path != null) {\n        const qsStart = path.indexOf('?');\n        if (qsStart > -1) {\n            queryString = path.substring(qsStart + 1);\n            path = path.substring(0, qsStart);\n        }\n        segments = path\n            .split('/')\n            .map((s) => s.trim())\n            .filter((s) => s.length > 0);\n        if (segments.length === 0) {\n            segments = [''];\n        }\n    }\n    return { segments, queryString };\n};\n\nconst printRoutes = (routes) => {\n    console.group(`[ion-core] ROUTES[${routes.length}]`);\n    for (const chain of routes) {\n        const segments = [];\n        chain.forEach((r) => segments.push(...r.segments));\n        const ids = chain.map((r) => r.id);\n        console.debug(`%c ${generatePath(segments)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\n    }\n    console.groupEnd();\n};\nconst printRedirects = (redirects) => {\n    console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\n    for (const redirect of redirects) {\n        if (redirect.to) {\n            console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to.segments)}`, 'font-weight: bold');\n        }\n    }\n    console.groupEnd();\n};\n\n/**\n * Activates the passed route chain.\n *\n * There must be exactly one outlet per route entry in the chain.\n *\n * The methods calls setRouteId on each of the outlet with the corresponding route entry in the chain.\n * setRouteId will create or select the view in the outlet.\n */\nconst writeNavState = async (root, chain, direction, index, changed = false, animation) => {\n    try {\n        // find next navigation outlet in the DOM\n        const outlet = searchNavNode(root);\n        // make sure we can continue interacting the DOM, otherwise abort\n        if (index >= chain.length || !outlet) {\n            return changed;\n        }\n        await new Promise((resolve) => componentOnReady(outlet, resolve));\n        const route = chain[index];\n        const result = await outlet.setRouteId(route.id, route.params, direction, animation);\n        // if the outlet changed the page, reset navigation to neutral (no direction)\n        // this means nested outlets will not animate\n        if (result.changed) {\n            direction = ROUTER_INTENT_NONE;\n            changed = true;\n        }\n        // recursively set nested outlets\n        changed = await writeNavState(result.element, chain, direction, index + 1, changed, animation);\n        // once all nested outlets are visible let's make the parent visible too,\n        // using markVisible prevents flickering\n        if (result.markVisible) {\n            await result.markVisible();\n        }\n        return changed;\n    }\n    catch (e) {\n        console.error(e);\n        return false;\n    }\n};\n/**\n * Recursively walks the outlet in the DOM.\n *\n * The function returns a list of RouteID corresponding to each of the outlet and the last outlet without a RouteID.\n */\nconst readNavState = async (root) => {\n    const ids = [];\n    let outlet;\n    let node = root;\n    // eslint-disable-next-line no-cond-assign\n    while ((outlet = searchNavNode(node))) {\n        const id = await outlet.getRouteId();\n        if (id) {\n            node = id.element;\n            id.element = undefined;\n            ids.push(id);\n        }\n        else {\n            break;\n        }\n    }\n    return { ids, outlet };\n};\nconst waitUntilNavNode = () => {\n    if (searchNavNode(document.body)) {\n        return Promise.resolve();\n    }\n    return new Promise((resolve) => {\n        window.addEventListener('ionNavWillLoad', () => resolve(), { once: true });\n    });\n};\n/** Selector for all the outlets supported by the router. */\nconst OUTLET_SELECTOR = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\nconst searchNavNode = (root) => {\n    if (!root) {\n        return undefined;\n    }\n    if (root.matches(OUTLET_SELECTOR)) {\n        return root;\n    }\n    const outlet = root.querySelector(OUTLET_SELECTOR);\n    return outlet !== null && outlet !== void 0 ? outlet : undefined;\n};\n\n/**\n * Returns whether the given redirect matches the given path segments.\n *\n * A redirect matches when the segments of the path and redirect.from are equal.\n * Note that segments are only checked until redirect.from contains a '*' which matches any path segment.\n * The path ['some', 'path', 'to', 'page'] matches both ['some', 'path', 'to', 'page'] and ['some', 'path', '*'].\n */\nconst matchesRedirect = (segments, redirect) => {\n    const { from, to } = redirect;\n    if (to === undefined) {\n        return false;\n    }\n    if (from.length > segments.length) {\n        return false;\n    }\n    for (let i = 0; i < from.length; i++) {\n        const expected = from[i];\n        if (expected === '*') {\n            return true;\n        }\n        if (expected !== segments[i]) {\n            return false;\n        }\n    }\n    return from.length === segments.length;\n};\n/** Returns the first redirect matching the path segments or undefined when no match found. */\nconst findRouteRedirect = (segments, redirects) => {\n    return redirects.find((redirect) => matchesRedirect(segments, redirect));\n};\nconst matchesIDs = (ids, chain) => {\n    const len = Math.min(ids.length, chain.length);\n    let score = 0;\n    for (let i = 0; i < len; i++) {\n        const routeId = ids[i];\n        const routeChain = chain[i];\n        // Skip results where the route id does not match the chain at the same index\n        if (routeId.id.toLowerCase() !== routeChain.id) {\n            break;\n        }\n        if (routeId.params) {\n            const routeIdParams = Object.keys(routeId.params);\n            // Only compare routes with the chain that have the same number of parameters.\n            if (routeIdParams.length === routeChain.segments.length) {\n                // Maps the route's params into a path based on the path variable names,\n                // to compare against the route chain format.\n                //\n                // Before:\n                // ```ts\n                // {\n                //  params: {\n                //    s1: 'a',\n                //    s2: 'b'\n                //  }\n                // }\n                // ```\n                //\n                // After:\n                // ```ts\n                // [':s1',':s2']\n                // ```\n                //\n                const pathWithParams = routeIdParams.map((key) => `:${key}`);\n                for (let j = 0; j < pathWithParams.length; j++) {\n                    // Skip results where the path variable is not a match\n                    if (pathWithParams[j].toLowerCase() !== routeChain.segments[j]) {\n                        break;\n                    }\n                    // Weight path matches for the same index higher.\n                    score++;\n                }\n            }\n        }\n        // Weight id matches\n        score++;\n    }\n    return score;\n};\n/**\n * Matches the segments against the chain.\n *\n * Returns:\n * - null when there is no match,\n * - a chain with the params properties updated with the parameter segments on match.\n */\nconst matchesSegments = (segments, chain) => {\n    const inputSegments = new RouterSegments(segments);\n    let matchesDefault = false;\n    let allparams;\n    for (let i = 0; i < chain.length; i++) {\n        const chainSegments = chain[i].segments;\n        if (chainSegments[0] === '') {\n            matchesDefault = true;\n        }\n        else {\n            for (const segment of chainSegments) {\n                const data = inputSegments.next();\n                // data param\n                if (segment[0] === ':') {\n                    if (data === '') {\n                        return null;\n                    }\n                    allparams = allparams || [];\n                    const params = allparams[i] || (allparams[i] = {});\n                    params[segment.slice(1)] = data;\n                }\n                else if (data !== segment) {\n                    return null;\n                }\n            }\n            matchesDefault = false;\n        }\n    }\n    const matches = matchesDefault ? matchesDefault === (inputSegments.next() === '') : true;\n    if (!matches) {\n        return null;\n    }\n    if (allparams) {\n        return chain.map((route, i) => ({\n            id: route.id,\n            segments: route.segments,\n            params: mergeParams(route.params, allparams[i]),\n            beforeEnter: route.beforeEnter,\n            beforeLeave: route.beforeLeave,\n        }));\n    }\n    return chain;\n};\n/**\n * Merges the route parameter objects.\n * Returns undefined when both parameters are undefined.\n */\nconst mergeParams = (a, b) => {\n    return a || b ? Object.assign(Object.assign({}, a), b) : undefined;\n};\n/**\n * Finds the best match for the ids in the chains.\n *\n * Returns the best match or null when no match is found.\n * When a chain is returned the parameters are updated from the RouteIDs.\n * That is they contain both the componentProps of the <ion-route> and the parameter segment.\n */\nconst findChainForIDs = (ids, chains) => {\n    let match = null;\n    let maxMatches = 0;\n    for (const chain of chains) {\n        const score = matchesIDs(ids, chain);\n        if (score > maxMatches) {\n            match = chain;\n            maxMatches = score;\n        }\n    }\n    if (match) {\n        return match.map((route, i) => {\n            var _a;\n            return ({\n                id: route.id,\n                segments: route.segments,\n                params: mergeParams(route.params, (_a = ids[i]) === null || _a === void 0 ? void 0 : _a.params),\n            });\n        });\n    }\n    return null;\n};\n/**\n * Finds the best match for the segments in the chains.\n *\n * Returns the best match or null when no match is found.\n * When a chain is returned the parameters are updated from the segments.\n * That is they contain both the componentProps of the <ion-route> and the parameter segments.\n */\nconst findChainForSegments = (segments, chains) => {\n    let match = null;\n    let bestScore = 0;\n    for (const chain of chains) {\n        const matchedChain = matchesSegments(segments, chain);\n        if (matchedChain !== null) {\n            const score = computePriority(matchedChain);\n            if (score > bestScore) {\n                bestScore = score;\n                match = matchedChain;\n            }\n        }\n    }\n    return match;\n};\n/**\n * Computes the priority of a chain.\n *\n * Parameter segments are given a lower priority over fixed segments.\n *\n * Considering the following 2 chains matching the path /path/to/page:\n * - /path/to/:where\n * - /path/to/page\n *\n * The second one will be given a higher priority because \"page\" is a fixed segment (vs \":where\", a parameter segment).\n */\nconst computePriority = (chain) => {\n    let score = 1;\n    let level = 1;\n    for (const route of chain) {\n        for (const segment of route.segments) {\n            if (segment[0] === ':') {\n                score += Math.pow(1, level);\n            }\n            else if (segment !== '') {\n                score += Math.pow(2, level);\n            }\n            level++;\n        }\n    }\n    return score;\n};\nclass RouterSegments {\n    constructor(segments) {\n        this.segments = segments.slice();\n    }\n    next() {\n        if (this.segments.length > 0) {\n            return this.segments.shift();\n        }\n        return '';\n    }\n}\n\nconst readProp = (el, prop) => {\n    if (prop in el) {\n        return el[prop];\n    }\n    if (el.hasAttribute(prop)) {\n        return el.getAttribute(prop);\n    }\n    return null;\n};\n/**\n * Extracts the redirects (that is <ion-route-redirect> elements inside the root).\n *\n * The redirects are returned as a list of RouteRedirect.\n */\nconst readRedirects = (root) => {\n    return Array.from(root.children)\n        .filter((el) => el.tagName === 'ION-ROUTE-REDIRECT')\n        .map((el) => {\n        const to = readProp(el, 'to');\n        return {\n            from: parsePath(readProp(el, 'from')).segments,\n            to: to == null ? undefined : parsePath(to),\n        };\n    });\n};\n/**\n * Extracts all the routes (that is <ion-route> elements inside the root).\n *\n * The routes are returned as a list of chains - the flattened tree.\n */\nconst readRoutes = (root) => {\n    return flattenRouterTree(readRouteNodes(root));\n};\n/**\n * Reads the route nodes as a tree modeled after the DOM tree of <ion-route> elements.\n *\n * Note: routes without a component are ignored together with their children.\n */\nconst readRouteNodes = (node) => {\n    return Array.from(node.children)\n        .filter((el) => el.tagName === 'ION-ROUTE' && el.component)\n        .map((el) => {\n        const component = readProp(el, 'component');\n        return {\n            segments: parsePath(readProp(el, 'url')).segments,\n            id: component.toLowerCase(),\n            params: el.componentProps,\n            beforeLeave: el.beforeLeave,\n            beforeEnter: el.beforeEnter,\n            children: readRouteNodes(el),\n        };\n    });\n};\n/**\n * Flattens a RouterTree in a list of chains.\n *\n * Each chain represents a path from the root node to a terminal node.\n */\nconst flattenRouterTree = (nodes) => {\n    const chains = [];\n    for (const node of nodes) {\n        flattenNode([], chains, node);\n    }\n    return chains;\n};\n/** Flattens a route node recursively and push each branch to the chains list. */\nconst flattenNode = (chain, chains, node) => {\n    chain = [\n        ...chain,\n        {\n            id: node.id,\n            segments: node.segments,\n            params: node.params,\n            beforeLeave: node.beforeLeave,\n            beforeEnter: node.beforeEnter,\n        },\n    ];\n    if (node.children.length === 0) {\n        chains.push(chain);\n        return;\n    }\n    for (const child of node.children) {\n        flattenNode(chain, chains, child);\n    }\n};\n\nconst Router = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n        this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n        this.previousPath = null;\n        this.busy = false;\n        this.state = 0;\n        this.lastState = 0;\n        this.root = '/';\n        this.useHash = true;\n    }\n    async componentWillLoad() {\n        await waitUntilNavNode();\n        const canProceed = await this.runGuards(this.getSegments());\n        if (canProceed !== true) {\n            if (typeof canProceed === 'object') {\n                const { redirect } = canProceed;\n                const path = parsePath(redirect);\n                this.setSegments(path.segments, ROUTER_INTENT_NONE, path.queryString);\n                await this.writeNavStateRoot(path.segments, ROUTER_INTENT_NONE);\n            }\n        }\n        else {\n            await this.onRoutesChanged();\n        }\n    }\n    componentDidLoad() {\n        window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n        window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n    }\n    async onPopState() {\n        const direction = this.historyDirection();\n        let segments = this.getSegments();\n        const canProceed = await this.runGuards(segments);\n        if (canProceed !== true) {\n            if (typeof canProceed === 'object') {\n                segments = parsePath(canProceed.redirect).segments;\n            }\n            else {\n                return false;\n            }\n        }\n        return this.writeNavStateRoot(segments, direction);\n    }\n    onBackButton(ev) {\n        ev.detail.register(0, (processNextHandler) => {\n            this.back();\n            processNextHandler();\n        });\n    }\n    /** @internal */\n    async canTransition() {\n        const canProceed = await this.runGuards();\n        if (canProceed !== true) {\n            if (typeof canProceed === 'object') {\n                return canProceed.redirect;\n            }\n            else {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Navigate to the specified path.\n     *\n     * @param path The path to navigate to.\n     * @param direction The direction of the animation. Defaults to `\"forward\"`.\n     */\n    async push(path, direction = 'forward', animation) {\n        var _a;\n        if (path.startsWith('.')) {\n            const currentPath = (_a = this.previousPath) !== null && _a !== void 0 ? _a : '/';\n            // Convert currentPath to an URL by pre-pending a protocol and a host to resolve the relative path.\n            const url = new URL(path, `https://host/${currentPath}`);\n            path = url.pathname + url.search;\n        }\n        let parsedPath = parsePath(path);\n        const canProceed = await this.runGuards(parsedPath.segments);\n        if (canProceed !== true) {\n            if (typeof canProceed === 'object') {\n                parsedPath = parsePath(canProceed.redirect);\n            }\n            else {\n                return false;\n            }\n        }\n        this.setSegments(parsedPath.segments, direction, parsedPath.queryString);\n        return this.writeNavStateRoot(parsedPath.segments, direction, animation);\n    }\n    /** Go back to previous page in the window.history. */\n    back() {\n        window.history.back();\n        return Promise.resolve(this.waitPromise);\n    }\n    /** @internal */\n    async printDebug() {\n        printRoutes(readRoutes(this.el));\n        printRedirects(readRedirects(this.el));\n    }\n    /** @internal */\n    async navChanged(direction) {\n        if (this.busy) {\n            console.warn('[ion-router] router is busy, navChanged was cancelled');\n            return false;\n        }\n        const { ids, outlet } = await readNavState(window.document.body);\n        const routes = readRoutes(this.el);\n        const chain = findChainForIDs(ids, routes);\n        if (!chain) {\n            console.warn('[ion-router] no matching URL for ', ids.map((i) => i.id));\n            return false;\n        }\n        const segments = chainToSegments(chain);\n        if (!segments) {\n            console.warn('[ion-router] router could not match path because some required param is missing');\n            return false;\n        }\n        this.setSegments(segments, direction);\n        await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, segments, null, ids.length);\n        return true;\n    }\n    /** This handler gets called when a `ion-route-redirect` component is added to the DOM or if the from or to property of such node changes. */\n    onRedirectChanged() {\n        const segments = this.getSegments();\n        if (segments && findRouteRedirect(segments, readRedirects(this.el))) {\n            this.writeNavStateRoot(segments, ROUTER_INTENT_NONE);\n        }\n    }\n    /** This handler gets called when a `ion-route` component is added to the DOM or if the from or to property of such node changes. */\n    onRoutesChanged() {\n        return this.writeNavStateRoot(this.getSegments(), ROUTER_INTENT_NONE);\n    }\n    historyDirection() {\n        var _a;\n        const win = window;\n        if (win.history.state === null) {\n            this.state++;\n            win.history.replaceState(this.state, win.document.title, (_a = win.document.location) === null || _a === void 0 ? void 0 : _a.href);\n        }\n        const state = win.history.state;\n        const lastState = this.lastState;\n        this.lastState = state;\n        if (state > lastState || (state >= lastState && lastState > 0)) {\n            return ROUTER_INTENT_FORWARD;\n        }\n        if (state < lastState) {\n            return ROUTER_INTENT_BACK;\n        }\n        return ROUTER_INTENT_NONE;\n    }\n    async writeNavStateRoot(segments, direction, animation) {\n        if (!segments) {\n            console.error('[ion-router] URL is not part of the routing set');\n            return false;\n        }\n        // lookup redirect rule\n        const redirects = readRedirects(this.el);\n        const redirect = findRouteRedirect(segments, redirects);\n        let redirectFrom = null;\n        if (redirect) {\n            const { segments: toSegments, queryString } = redirect.to;\n            this.setSegments(toSegments, direction, queryString);\n            redirectFrom = redirect.from;\n            segments = toSegments;\n        }\n        // lookup route chain\n        const routes = readRoutes(this.el);\n        const chain = findChainForSegments(segments, routes);\n        if (!chain) {\n            console.error('[ion-router] the path does not match any route');\n            return false;\n        }\n        // write DOM give\n        return this.safeWriteNavState(document.body, chain, direction, segments, redirectFrom, 0, animation);\n    }\n    async safeWriteNavState(node, chain, direction, segments, redirectFrom, index = 0, animation) {\n        const unlock = await this.lock();\n        let changed = false;\n        try {\n            changed = await this.writeNavState(node, chain, direction, segments, redirectFrom, index, animation);\n        }\n        catch (e) {\n            console.error(e);\n        }\n        unlock();\n        return changed;\n    }\n    async lock() {\n        const p = this.waitPromise;\n        let resolve;\n        this.waitPromise = new Promise((r) => (resolve = r));\n        if (p !== undefined) {\n            await p;\n        }\n        return resolve;\n    }\n    /**\n     * Executes the beforeLeave hook of the source route and the beforeEnter hook of the target route if they exist.\n     *\n     * When the beforeLeave hook does not return true (to allow navigating) then that value is returned early and the beforeEnter is executed.\n     * Otherwise the beforeEnterHook hook of the target route is executed.\n     */\n    async runGuards(to = this.getSegments(), from) {\n        if (from === undefined) {\n            from = parsePath(this.previousPath).segments;\n        }\n        if (!to || !from) {\n            return true;\n        }\n        const routes = readRoutes(this.el);\n        const fromChain = findChainForSegments(from, routes);\n        // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n        const beforeLeaveHook = fromChain && fromChain[fromChain.length - 1].beforeLeave;\n        const canLeave = beforeLeaveHook ? await beforeLeaveHook() : true;\n        if (canLeave === false || typeof canLeave === 'object') {\n            return canLeave;\n        }\n        const toChain = findChainForSegments(to, routes);\n        // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n        const beforeEnterHook = toChain && toChain[toChain.length - 1].beforeEnter;\n        return beforeEnterHook ? beforeEnterHook() : true;\n    }\n    async writeNavState(node, chain, direction, segments, redirectFrom, index = 0, animation) {\n        if (this.busy) {\n            console.warn('[ion-router] router is busy, transition was cancelled');\n            return false;\n        }\n        this.busy = true;\n        // generate route event and emit will change\n        const routeEvent = this.routeChangeEvent(segments, redirectFrom);\n        if (routeEvent) {\n            this.ionRouteWillChange.emit(routeEvent);\n        }\n        const changed = await writeNavState(node, chain, direction, index, false, animation);\n        this.busy = false;\n        // emit did change\n        if (routeEvent) {\n            this.ionRouteDidChange.emit(routeEvent);\n        }\n        return changed;\n    }\n    setSegments(segments, direction, queryString) {\n        this.state++;\n        writeSegments(window.history, this.root, this.useHash, segments, direction, this.state, queryString);\n    }\n    getSegments() {\n        return readSegments(window.location, this.root, this.useHash);\n    }\n    routeChangeEvent(toSegments, redirectFromSegments) {\n        const from = this.previousPath;\n        const to = generatePath(toSegments);\n        this.previousPath = to;\n        if (to === from) {\n            return null;\n        }\n        const redirectedFrom = redirectFromSegments ? generatePath(redirectFromSegments) : null;\n        return {\n            from,\n            redirectedFrom,\n            to,\n        };\n    }\n    get el() { return getElement(this); }\n};\n\nconst routerLinkCss = \":host{--background:transparent;--color:var(--ion-color-primary, #0054e9);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\nconst IonRouterLinkStyle0 = routerLinkCss;\n\nconst RouterLink = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.onClick = (ev) => {\n            openURL(this.href, ev, this.routerDirection, this.routerAnimation);\n        };\n        this.color = undefined;\n        this.href = undefined;\n        this.rel = undefined;\n        this.routerDirection = 'forward';\n        this.routerAnimation = undefined;\n        this.target = undefined;\n    }\n    render() {\n        const mode = getIonMode(this);\n        const attrs = {\n            href: this.href,\n            rel: this.rel,\n            target: this.target,\n        };\n        return (h(Host, { key: '11183264fb6ae0db9a7a47c71b6862d60001b834', onClick: this.onClick, class: createColorClasses(this.color, {\n                [mode]: true,\n                'ion-activatable': true,\n            }) }, h(\"a\", Object.assign({ key: '3e0e5242161cb0df593d6d573e51b8ba750065a1' }, attrs), h(\"slot\", { key: '5bd808e98a4627bb1236f0d955f4b32971355417' }))));\n    }\n};\nRouterLink.style = IonRouterLinkStyle0;\n\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };\n"],"x_google_ignoreList":[0,1]}